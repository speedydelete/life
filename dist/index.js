/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
function query(query) {
  var out = document.querySelector(query);
  if (!out) {
    throw new Error("Missing query: '".concat(query, "'"));
  }
  return out;
}
var EMPTY = 0;
var DEBRIS = 1;
var MOVE_UD = 2;
var MOVE_DU = 3;
var MOVE_LR = 4;
var MOVE_RL = 5;
var MOVE_UR = 6;
var MOVE_RD = 7;
var MOVE_DL = 8;
var MOVE_LU = 9;
var MOVE_UL = 10;
var MOVE_LD = 11;
var MOVE_DR = 12;
var MOVE_RU = 13;
var SHIELD = 14;
var PUSH_U = 15;
var PUSH_D = 16;
var PUSH_L = 17;
var PUSH_R = 18;
var SPAWNER_UD = 19;
var SPAWNER_LR = 20;
var EATER_UD = 21;
var EATER_LR = 22;
var height = 512;
var width = 512;
var grid = new Uint8Array(height * width);
var age = new Uint8ClampedArray(height * width);
function radiationDoesHit(chance, row, col, block) {
  if (Math.random() > chance) {
    return false;
  }
  if (block === SHIELD || grid[(row - 1) * height + col] === SHIELD || grid[(row + 1) * height + col] === SHIELD || grid[row * height + col - 1] === SHIELD || grid[row * height + col + 1] === SHIELD) {
    return Math.random() < 0.01;
  }
  return true;
}
function normalize(index) {
  if (index < 0) {
    return index + grid.length;
  } else if (index >= grid.length) {
    return index - grid.length;
  } else {
    return index;
  }
}
function updateGrid() {
  var changes = [];
  for (var row = 0; row < height; row++) {
    for (var col = 0; col < width; col++) {
      var index = row * height + col;
      var block = grid[index];
      if (block === EMPTY) {
        if (Math.random() < 0.0001) {
          changes.push([index, 1 + Math.floor(Math.random() * 22)]);
        }
        continue;
      } else if (block === DEBRIS) {
        if (Math.random() < 0.25) {
          changes.push([index, EMPTY]);
          continue;
        }
      } else if (radiationDoesHit(0.01, row, col, block)) {
        changes.push([index, EMPTY]);
      } else if (block === SHIELD) {
        continue;
      } else if (block === SPAWNER_UD || block === SPAWNER_LR || block === EATER_UD || block === EATER_LR) {
        var items = void 0;
        if (block === SPAWNER_UD || block === EATER_UD) {
          items = [(row - 1) * height + col, (row + 1) * height + col];
        } else {
          items = [row * height + col - 1, row * height + col + 1];
        }
        for (var _index of items) {
          if (block === SPAWNER_UD || block === SPAWNER_LR) {
            if (grid[_index] === EMPTY) {
              changes.push([_index, 1 + Math.floor(Math.random() * 22)]);
            }
          } else if (grid[_index] !== EMPTY) {
            changes.push([_index, EMPTY]);
          }
        }
      } else if (block === PUSH_U || block === PUSH_D || block === PUSH_L || block === PUSH_R) {
        var otherIndex = void 0;
        var nextOtherIndex = void 0;
        if (block === PUSH_U) {
          otherIndex = (row - 1) * height + col;
          nextOtherIndex = (row - 2) * height + col;
        } else if (block === PUSH_D) {
          otherIndex = (row + 1) * height + col;
          nextOtherIndex = (row + 2) * height + col;
        } else if (block === PUSH_L) {
          otherIndex = row * height + col - 1;
          nextOtherIndex = row * height + col - 2;
        } else {
          otherIndex = row * height + col + 1;
          nextOtherIndex = row * height + col + 2;
        }
        otherIndex = normalize(otherIndex);
        nextOtherIndex = normalize(nextOtherIndex);
        if (grid[otherIndex] !== EMPTY && grid[nextOtherIndex] === EMPTY) {
          changes.push([index, DEBRIS]);
          changes.push([otherIndex, block]);
          changes.push([nextOtherIndex, grid[otherIndex]]);
        } else if (grid[otherIndex] === EMPTY) {
          changes.push([index, DEBRIS]);
          changes.push([otherIndex, block]);
        }
      } else {
        var startIndex = void 0;
        if (block === MOVE_UD || block === MOVE_UR || block === MOVE_UL) {
          startIndex = (row - 1) * height + col;
        } else if (block === MOVE_RL || block === MOVE_RD || block === MOVE_RU) {
          startIndex = row * height + col + 1;
        } else if (block === MOVE_DU || block === MOVE_DL || block === MOVE_DR) {
          startIndex = (row + 1) * height + col;
        } else {
          startIndex = row * height + col - 1;
        }
        startIndex = normalize(startIndex);
        if (grid[startIndex] === EMPTY) {
          startIndex = index;
        }
        var endIndex = void 0;
        if (block === MOVE_DU || block === MOVE_LU || block === MOVE_RU) {
          endIndex = (row - 1) * height + col;
        } else if (block === MOVE_LR || block === MOVE_UR || block === MOVE_DR) {
          endIndex = row * height + col + 1;
        } else if (block === MOVE_UD || block === MOVE_RD || block === MOVE_LD) {
          endIndex = (row + 1) * height + col;
        } else {
          endIndex = row * height + col - 1;
        }
        endIndex = normalize(endIndex);
        if (grid[endIndex] !== EMPTY) {
          continue;
        }
        var movedBlock = grid[startIndex];
        changes.push([startIndex, EMPTY]);
        changes.push([endIndex, movedBlock]);
      }
    }
  }
  for (var [_index2, _block] of changes) {
    grid[_index2] = _block;
    age[_index2] = 0;
  }
  for (var _row = 0; _row < height; _row++) {
    for (var _col = 0; _col < width; _col++) {
      var _index3 = _row * height + _col;
      if (grid[_index3] === EMPTY) {
        continue;
      }
      age[_index3]++;
      if (age[_index3] > Math.random() * 80 + 20 && radiationDoesHit(1, _row, _col, grid[_index3])) {
        grid[_index3] = DEBRIS;
        age[_index3] = 0;
      }
    }
  }
}
var canvas = document.querySelector('canvas');
canvas.width = width * 16;
canvas.height = height * 16;
var ctx = canvas.getContext('2d');
ctx.strokeStyle = '#ffffff';
ctx.lineCap = 'round';
ctx.lineWidth = 2;
var offsetX = 0;
var offsetY = 0;
var scale = 1;
var isDragging = false;
var dragStart = {
  x: 0,
  y: 0
};
var dragOffsetStart = {
  x: 0,
  y: 0
};
function drawArrowhead(x, y, dir) {
  ctx.moveTo(x, y);
  if (dir === 'up') {
    ctx.lineTo(x - 3, y + 3);
    ctx.moveTo(x, y);
    ctx.lineTo(x + 3, y + 3);
  } else if (dir === 'down') {
    ctx.lineTo(x - 3, y - 3);
    ctx.moveTo(x, y);
    ctx.lineTo(x + 3, y - 3);
  } else if (dir === 'left') {
    ctx.lineTo(x + 3, y - 3);
    ctx.moveTo(x, y);
    ctx.lineTo(x + 3, y + 3);
  } else {
    ctx.lineTo(x - 3, y - 3);
    ctx.moveTo(x, y);
    ctx.lineTo(x - 3, y + 3);
  }
}
function updateCanvas() {
  ctx.save();
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.translate(offsetX, offsetY);
  ctx.scale(scale, scale);
  for (var row = 0; row < height; row++) {
    for (var col = 0; col < width; col++) {
      var block = grid[row * height + col];
      var x = col * 16;
      var y = row * 16;
      if (block === EMPTY) {
        continue;
      } else if (block === DEBRIS) {
        ctx.fillStyle = '#7f7f7f';
        ctx.fillRect(x, y, 16, 16);
      } else if (block === SHIELD) {
        ctx.fillStyle = '#007fff';
        ctx.fillRect(x, y, 16, 16);
      } else if (block === SPAWNER_UD || block === SPAWNER_LR || block === EATER_UD || block === EATER_LR) {
        if (block === SPAWNER_UD || block === SPAWNER_LR) {
          ctx.fillStyle = '#00ff00';
        } else {
          ctx.fillStyle = '#ff0000';
        }
        ctx.fillRect(x, y, 16, 16);
        ctx.beginPath();
        if (block === SPAWNER_UD || block === EATER_UD) {
          ctx.moveTo(x + 8, y + 2);
          ctx.lineTo(x + 8, y + 14);
        } else {
          ctx.moveTo(x + 2, y + 8);
          ctx.lineTo(x + 14, y + 8);
        }
        ctx.stroke();
      } else if (block === PUSH_U || block === PUSH_D || block === PUSH_L || block === PUSH_R) {
        ctx.fillStyle = '#ffff00';
        ctx.fillRect(x, y, 16, 16);
        ctx.beginPath();
        if (block === PUSH_U || block === PUSH_D) {
          ctx.moveTo(x + 8, y + 2);
          ctx.lineTo(x + 8, y + 14);
          if (block === PUSH_U) {
            drawArrowhead(x + 8, y + 2, 'up');
          } else {
            drawArrowhead(x + 8, y + 14, 'down');
          }
        } else {
          ctx.moveTo(x + 2, y + 8);
          ctx.lineTo(x + 14, y + 8);
          if (block === PUSH_L) {
            drawArrowhead(x + 2, y + 8, 'left');
          } else {
            drawArrowhead(x + 14, y + 8, 'right');
          }
        }
        ctx.stroke();
      } else {
        ctx.fillStyle = '#bf00bf';
        ctx.fillRect(x, y, 16, 16);
        ctx.beginPath();
        ctx.moveTo(x + 8, y + 8);
        if (block === MOVE_UD || block === MOVE_UR || block === MOVE_UL) {
          ctx.lineTo(x + 8, y + 2);
        } else if (block === MOVE_RL || block === MOVE_RD || block === MOVE_RU) {
          ctx.lineTo(x + 14, y + 8);
        } else if (block === MOVE_DU || block === MOVE_DL || block === MOVE_DR) {
          ctx.lineTo(x + 8, y + 14);
        } else {
          ctx.lineTo(x + 2, y + 8);
        }
        ctx.moveTo(x + 8, y + 8);
        if (block === MOVE_DU || block === MOVE_LU || block === MOVE_RU) {
          ctx.lineTo(x + 8, y + 2);
          drawArrowhead(x + 8, y + 2, 'up');
        } else if (block === MOVE_LR || block === MOVE_UR || block === MOVE_DR) {
          ctx.lineTo(x + 14, y + 8);
          drawArrowhead(x + 14, y + 8, 'right');
        } else if (block === MOVE_UD || block === MOVE_RD || block === MOVE_LD) {
          ctx.lineTo(x + 8, y + 14);
          drawArrowhead(x + 8, y + 14, 'down');
        } else {
          ctx.lineTo(x + 2, y + 8);
          drawArrowhead(x + 2, y + 8, 'left');
        }
        ctx.stroke();
      }
    }
  }
  ctx.restore();
}
canvas.addEventListener('mousedown', event => {
  isDragging = true;
  dragStart = {
    x: event.clientX,
    y: event.clientY
  };
  dragOffsetStart = {
    x: offsetX,
    y: offsetY
  };
});
canvas.addEventListener('mousemove', event => {
  if (!isDragging) {
    return;
  }
  offsetX = dragOffsetStart.x + (event.clientX - dragStart.x);
  offsetY = dragOffsetStart.y + (event.clientY - dragStart.y);
});
canvas.addEventListener('mouseup', () => isDragging = false);
canvas.addEventListener('mouseleave', () => isDragging = false);
canvas.addEventListener('wheel', event => {
  event.preventDefault();
  var rect = canvas.getBoundingClientRect();
  var mouseX = event.clientX - rect.left;
  var mouseY = event.clientY - rect.top;
  var zoomAmount = event.deltaY < 0 ? 1.1 : 0.9;
  var newScale = Math.min(Math.max(0.1, scale * zoomAmount), 10);
  var worldX = (mouseX - offsetX) / scale;
  var worldY = (mouseY - offsetY) / scale;
  offsetX = mouseX - worldX * newScale;
  offsetY = mouseY - worldY * newScale;
  scale = newScale;
});
query('#step').addEventListener('click', () => {
  updateGrid();
  updateCanvas();
});
for (var row = 0; row < height; row++) {
  for (var col = 0; col < width; col++) {
    if (Math.random() < 0.25) {
      var r = Math.random();
      if (r < 0.1) {
        grid[row * height + col] = SHIELD;
      } else if (r < 0.13) {
        grid[row * height + col] = 15 + Math.floor(Math.random() * 4);
      } else if (r < 0.14) {
        grid[row * height + col] = Math.random() >= 0.5 ? SPAWNER_UD : SPAWNER_LR;
      } else if (r < 0.15) {
        grid[row * height + col] = Math.random() >= 0.5 ? EATER_UD : EATER_LR;
      } else {
        grid[row * height + col] = 2 + Math.floor(Math.random() * 12);
      }
    }
  }
}
window.addEventListener('load', updateCanvas);
setInterval(updateGrid, 100);
setInterval(updateCanvas, 1000 / 60);

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,